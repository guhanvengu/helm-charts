# Default values for hasura-graphql-engine.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

labels: {}

selectorLabels: {}

podAnnotations: {}

image:
  tag: v1.3.3
  repository: hasura/graphql-engine
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

deploymentApiVersion: app/v1
# deploymentApiVersion: extensions/v1beta1

application:
  track: stable
  tier: web
  migrateCommand: "hasura migrate apply"
  initializeCommand: "hasura seeds apply"
  secretName: null
  secretChecksum: null

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podSecurityContext:
  fsGroup: 2000

securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

strategyType: ""

service:
  enabled: true
  type: ClusterIP
  port: 5000
  internalPort: 8080
  name: http
  protocol: TCP
  annotations: {}
  url: http://hasura.my.host.com/
  additionalHosts: []
  commonName: ""

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: hasura-graphql-engine.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - hasura-graphql-engine.local
  # tls:
  #   enabled: true
  #   secretName: ""
  modSecurity:
    enabled: false
    secRuleEngine: "DetectionOnly"
    # secRules:
    #   - variable: ""
    #     operator: ""
    #     action: ""

prometheus:
  metrics: false


resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

livenessProbe:
  enabled: true
  path: "/healthz"
  initialDelaySeconds: 15
  timeoutSeconds: 15
readinessProbe:
  enabled: true
  path: "/v1/version"
  initialDelaySeconds: 5
  timeoutSeconds: 3

hpa:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80

## Configure PodDisruptionBudget
## ref: https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
#
podDisruptionBudget:
  enabled: false
  minAvailable: 1
  maxUnavailable: 1

## Configure NetworkPolicy
## ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
#
networkPolicy:
  enabled: false
  spec:
    podSelector:
      matchLabels: {}
    ingress:
    - from:
      - podSelector:
          matchLabels: {}
      - namespaceSelector:
          matchLabels: {}
            # app.gitlab.com/managed_by: gitlab

# Environment variables
env:
  - name: HASURA_GRAPHQL_DATABASE_URL
    value: "postgres://username:password@hostname:port/dbname"
  - name: HASURA_GRAPHQL_ENABLE_CONSOLE
    value: "false"
  - name: HASURA_GRAPHQL_ENABLE_LOG_TYPES
    value: "startup, http-log, webhook-log, websocket-log, query-log"
  - name: HASURA_GRAPHQL_ADMIN_SECRET
    value: ""

envPrefix: "HASURA_GRAPHQL_"

# Config variables to build environment with by prefixing <envPrefix>_<option>
config:

  # Port on which graphql-engine should be served (default: 8080)
  SERVER_PORT: 8080

  # Host on which graphql-engine will listen (default: *)
  SERVER_HOST: "*"

  # Enable the Hasura Console (served by the server on / and /console) (default: false)
  ENABLE_CONSOLE: "false"

  # Admin secret key, required to access this instance. This is mandatory when you use webhook or JWT.
  ADMIN_SECRET: ""

  # URL of the authorization webhook required to authorize requests. See auth webhooks docs for more details.
  AUTH_HOOK: ""

  # HTTP method to use for the authorization webhook (default: GET)
  AUTH_HOOK_MODE: "GET"

  # A JSON string containing type and the JWK used for verifying (and other
  # optional details).
  # Example: {"type": "HS256", "key": "3bd561c37d214b4496d09049fadc542c"}.
  # See the JWT docs for more details.
  JWT_SECRET: ""

  # Unauthorized role, used when access-key is not sent in access-key only
  # mode or the Authorization header is absent in JWT mode.
  # Example: anonymous. Now whenever the "authorization" header is
  # absent, the request's role will default to anonymous.
  UNAUTHORIZED_ROLE: "anonymous"

  # CSV of list of domains, incuding scheme (http/https) and port, to allow for CORS. Wildcard domains are allowed. (See :ref:configure-cors)
  CORS_DOMAIN: "*"

  # Disable CORS. Do not send any CORS headers on any request.
  DISABLE_CORS: ""

  # Read cookie on WebSocket initial handshake even when CORS is disabled.
  # This can be a potential security flaw! Please make sure you know what
  # you're doing. This configuration is only applicable when CORS is disabled.
  # (default: false)
  WS_READ_COOKIE: "false"

  # Enable anonymous telemetry (default: true)
  ENABLE_TELEMETRY: "true"

  # Maximum number of concurrent http workers delivering events at any time (default: 100)
  EVENTS_HTTP_POOL_SIZE: 100

  # Interval in milliseconds to sleep before trying to fetch events again after a fetch returned no events from postgres
  EVENTS_FETCH_INTERVAL: 10

  # Number of stripes (distinct sub-pools) to maintain with Postgres (default: 1).
  # New connections will be taken from a particular stripe pseudo-randomly.
  PG_STRIPES: 1

  # Maximum number of Postgres connections that can be opened per stripe (default: 50).
  # When the maximum is reached we will block until a new connection becomes available,
  # even if there is capacity in other stripes.
  PG_CONNECTIONS: 50

  # Each connection's idle time before it is closed (default: 180 sec)
  PG_TIMEOUT: "180 sec"

  # Use prepared statements for queries (default: true)
  USE_PREPARED_STATEMENTS: "true"

  # Transaction isolation. read-committed / repeatable-read / serializable (default: read-commited)
  TX_ISOLATION: "read-commited"

  # Stringify certain Postgres numeric types, specifically bigint, numeric, decimal and
  # double precision as they don't fit into the IEEE-754 spec for JSON encoding-decoding.
  # (default: false)
  STRINGIFY_NUMERIC_TYPES: "false"

  # Comma separated list of APIs (options: metadata, graphql, pgdump) to be enabled.
  # (default: metadata,graphql,pgdump)
  ENABLED_APIS: "metadata,graphql,pgdump"

  # Updated results (if any) will be sent at most once in this interval (in milliseconds) for live queries
  # which can be multiplexed. Default: 1000 (1sec)
  LIVE_QUERIES_MULTIPLEXED_REFETCH_INTERVAL: 1000

  # Multiplexed live queries are split into batches of the specified size. Default: 100
  LIVE_QUERIES_MULTIPLEXED_BATCH_SIZE: 100

  # Restrict queries allowed to be executed by the GraphQL engine to those that are part of the configured
  # allow-list. Default: false *(Available for versions > v1.0.0-beta.1)*
  ENABLE_ALLOWLIST: "false"

  # Set the value to /srv/console-assets for the console to load assets from the server itself
  # instead of CDN *(Available for versions > v1.0.0-beta.1)*
  # CONSOLE_ASSETS_DIR: ""

  # Set the enabled log types. This is a comma-separated list of log-types to
  # enable. Default: startup, http-log, webhook-log, websocket-log. See
  # :ref:log types <log-types> for more details.
  ENABLED_LOG_TYPES: "startup, http-log, webhook-log, websocket-log"

  # Set the logging level. Default: info. Options: debug, info, warn, error.
  LOG_LEVEL: "info"

  # Set dev mode for GraphQL requests; include the internal key in the errors extensions of the response (if required).
  DEV_MODE: "false"

  # Include the internal key in the errors extensions of the response for GraphQL requests with the admin role (if required).
  ADMIN_INTERNAL_ERRORS: "false"

  # cli-migrations.v2 configuration
  # -------------------------------

  MIGRATIONS_DIR: /hasura-migrations
  METADATA_DIR: /hasura-metadata

  # Defines a pointer to an environment variable, which holds the database url e.g.
  MIGRATIONS_DATABASE_ENV_VAR: DATABASE_URL
  MIGRATIONS_DATABASE_URL: 'postgres://postgres:postgres@localhost:5432/postgres'

  DATABASE_URL: ""

  MIGRATIONS_SERVER_PORT: 9691

  MIGRATIONS_SERVER_TIMEOUT: 30s
