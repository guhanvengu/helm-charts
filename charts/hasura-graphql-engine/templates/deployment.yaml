apiVersion: {{ default "extensions/v1beta1" .Values.deploymentApiVersion }}
kind: Deployment
metadata:
  name: {{ include "hasura-graphql-engine.fullname" . }}
  labels:
    {{- include "hasura-graphql-engine.labels" . | nindent 4 }}
    app: {{ include "hasura-graphql-engine.name" . }}
    track: "{{ .Values.application.track }}"
    tier: "{{ .Values.application.tier }}"
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}

spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "hasura-graphql-engine.selectorLabels" . | nindent 6 }}
      {{- if or .Values.enableSelector (eq (default "extensions/v1beta1" .Values.deploymentApiVersion) "apps/v1") }}
      app: {{ template "appname" . }}
      track: "{{ .Values.application.track }}"
      tier: "{{ .Values.application.tier }}"
      release: {{ .Release.Name }}
      {{- end }}
  {{- if .Values.strategyType -}}
  strategy:
    type: {{ .Values.strategyType | quote }}
  {{- end }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations: 
{{ toYaml . | indent 8 }}
      {{- end }}
      labels:
        {{- include "hasura-graphql-engine.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml . | indent 8 }}
      {{- end }}
      serviceAccountName: {{ include "hasura-graphql-engine.serviceAccountName" . }}
      {{- with .Values.podSecurityContext }}
      securityContext:
{{ toYaml . | indent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          {{- with .Values.securityContext }}
          securityContext:
{{ toYaml . | indent 12 }}
          {{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.application.secretName }}
          envFrom:
            - secretRef:
              name: {{ .Values.application.secretName | quote }}
          {{- end }}
          env:
          {{- with .Values.env }} 
{{ toYaml . | indent 12 }}
          {{- end }}
          {{- range $cfgKey, $cfgVal := .Values.config }}
            - name: {{ template "prefixenv" $cfgKey }}
              value: {{ tpl (toString $cfgVal) $ | quote }}
          {{- end }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessProbe.path | default "/healthz" }}
              scheme: HTTP
              port: http
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.path | default "/healthz" }}
              scheme: HTTP
              port: http
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          {{- end }}
          {{- with .Values.resources }}
          resources:
{{ toYaml . | indent 12 }}
          {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
      {{- end }}
